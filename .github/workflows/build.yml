name: Build Application

on:
  workflow_dispatch:
  push:
    branches:
      - master
    tags: ["v*.*.*"]

  pull_request:
    branches:
      - master
      - developed
      - feature/*
      - test/*
      - hotfix/*
      - fix/*
      - tech/
    types: [opened, synchronize, closed]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  IS_MERGED: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged }}

jobs:
  update-tag-version:
    name: Generate semantic version Tag
    if: ${{ github.event.action != 'closed' }}
    uses: ./.github/workflows/update_semver.yml

  build-api:
    name: Build API
    needs: [update-tag-version]
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.find-pr.outputs.number }}
      last_tag: ${{ steps.extract_tag.outputs.TARGET_TAG }}
      pr: ${{ steps.find-pr.outputs.pr }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "9.0.x"

      - name: Setup Reviewdog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: "v0.20.3"

      - name: Setup Java for SonarQube
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Find Current PR
        uses: jwalton/gh-find-current-pr@v1
        id: find-pr
        with:
          state: open

      - name: Get PR Number
        run: echo "Your PR is ${PR}"
        if: success() && steps.find-pr.outputs.number
        env:
          PR: ${{ steps.find-pr.outputs.pr }}

      - name: Get Last Git Tag
        id: extract_tag
        shell: bash
        run: |
          tag_v=$(git describe --tags $(git rev-list --tags --max-count=1))
          tag=$(echo $tag_v | sed 's/v//')

          echo "TARGET_TAG=${tag}" >> $GITHUB_OUTPUT
          echo "Last git tag: $tag"

      - name: Install ReviewDog
        run: |
          curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b ./bin
          echo "$(pwd)/bin" >> $GITHUB_PATH

      - name: Build
        run: dotnet build --no-incremental

      - name: StyleCop with ReviewDog
        run: |
          dotnet format --severity info | reviewdog -efm="%f(%l,%c): %m" -name="StyleCop" -reporter=github-pr-review || true
          echo "Format result (dummy): done" # Adjust this for real linting feedback

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

  unit-tests:
    needs: build-api
    name: Unit Tests Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "9.0.x"

      - name: Install dotnet tools
        run: dotnet tool install --global JetBrains.dotCover.GlobalTool --version 2023.2.3

      - name: Run dotCover Unit Tests
        run: |
          dotnet-dotcover test HomeBudgetAccountingApi.sln \
            --dcReportType=HTML \
            --dcOutput="test-results/unit-coverage.html" \
            --dcFilters="+:HomeBudget.*;-:module=*IntegrationTests;-:module=*Test.Core"
        timeout-minutes: 10

      - name: Upload Unit Coverage Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage-report
          path: test-results/*

  integration-tests:
    needs: build-api
    name: Integration Tests Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "9.0.x"

      - name: Install dotnet tools
        run: dotnet tool install --global JetBrains.dotCover.GlobalTool --version 2023.2.3

      - name: Run dotCover Integration Tests
        run: |
          dotnet-dotcover test HomeBudgetAccountingApi.sln \
            --dcReportType=HTML \
            --dcOutput="test-results/integration-coverage.html" \
            --dcFilters="+:HomeBudget.*;-:module=*Tests;-:module=*Test.Core"
        timeout-minutes: 30

      - name: Upload Integration Coverage Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-coverage-report
          path: test-results/*

  merge-coverage:
    needs: [unit-tests, integration-tests]
    name: Merge Coverage Reports
    runs-on: ubuntu-latest
    steps:
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "9.0.x"

      - name: Install dotnet tools
        run: dotnet tool install --global JetBrains.dotCover.GlobalTool --version 2023.2.3

      - name: Download Unit Coverage
        uses: actions/download-artifact@v4
        with:
          name: unit-coverage-report
          path: test-results/unit

      - name: Download Integration Coverage
        uses: actions/download-artifact@v4
        with:
          name: integration-coverage-report
          path: test-results/integration

      - name: Merge Coverage
        run: |
          dotnet-dotcover merge \
            test-results/unit/unit-coverage.html \
            test-results/integration/integration-coverage.html \
            --dcReportType=HTML \
            --dcOutput="test-results/merged-coverage.html"

      - name: Upload Merged Coverage Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: merged-coverage-report
          path: test-results/*

  sonar-analysis:
    needs: [merge-coverage, build-api]
    name: Sonar scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java for SonarQube
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "9.0.x"

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: test-results

      - name: Install dotnet tools
        run: |
          dotnet tool install --global dotnet-sonarscanner --version 5.14.0

      - name: Make the scanner script file executable
        run: |
          chmod +x ./startsonar.sh

      - name: Start sonar scanning
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          RUN_NUMBER: ${{ github.run_number }}
          RUN_ATTEMPT: ${{ github.run_attempt }}
          PULL_REQUEST_ID: ${{ needs.build-api.outputs.pr }}
          PULL_REQUEST_SOURCE_BRANCH: ${{ github.ref }}
          PULL_REQUEST_TARGET_BRANCH: refs/heads/master
          ACTION: ${{ github.action }}
          EVENT_NAME: ${{ github.event_name }}
        shell: bash
        run: sh ./startsonar.sh

      - name: Build Solution for Metrics
        shell: bash
        run: |
          dotnet build HomeBudgetAccountingApi.sln --no-incremental

      - name: End Sonar scan
        run: dotnet-sonarscanner end /d:sonar.login="$SONAR_TOKEN"

  build-docker:
    name: Build and Push Docker Image
    needs: [build-api, merge-coverage]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build Docker Image
        env:
          BUILD_VERSION: ${{ needs.build-api.outputs.last_tag }}
        shell: bash
        run: |
          docker build \
            --target 'final' \
            -t "${{ secrets.DOCKERHUB_USERNAME }}/homebudget-accounting-api:${{ needs.build-api.outputs.last_tag }}" \
            .

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker Image
        shell: bash
        run: |
          docker push "${{ secrets.DOCKERHUB_USERNAME }}/homebudget-accounting-api:${{ needs.build-api.outputs.last_tag }}"
