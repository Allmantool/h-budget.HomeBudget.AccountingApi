name: Build Application

on:
  workflow_dispatch:
  push:
    branches:
      - master
    tags: ["v*.*.*"]

  pull_request:
    branches:
      - master
      - developed
      - feature/*
      - test/*
      - hotfix/*
      - fix/*
      - tech/*
    types: [opened, synchronize, closed]

jobs:
  # Job to update tag version if the PR is merged
  update-tag-version-if_merged:
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true }}
    uses: ./.github/workflows/update_semver.yml

  # Set up environment and install tools in parallel
  setup-and-install-tools:
    name: Set Up Environment & Install Tools
    runs-on: ubuntu-latest
    outputs:
      tag_version: ${{ steps.last_tag.outputs.TARGET_TAG }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure full git history for relevant analysis

      - name: Set up JDK 21 for SonarScanner
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Setup .NET 9.0 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "9.0.x"

      - name: Install external tools for quality gate verification
        shell: bash
        run: |
          dotnet tool install --global JetBrains.dotCover.GlobalTool --version 2023.2.3
          dotnet tool install --global dotnet-sonarscanner --version 5.14.0

      - name: Enquire last git tag
        id: last_tag
        shell: bash
        run: |
          tag_v=$(git describe --tags $(git rev-list --tags --max-count=1))
          tag=$(echo $tag_v | sed 's/v//')
          echo "TARGET_TAG=${tag}" >> $GITHUB_OUTPUT
          echo "Last git tag: $tag"

  # Job for SonarCloud scanning (runs after setup)
  sonar-scan:
    needs: setup-and-install-tools
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' && github.event.action != 'closed' }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure full git history for analysis

      - name: Set up 'Find Current Pull Request'
        uses: jwalton/gh-find-current-pr@v1
        id: findPr
        with:
          state: open

      - name: Install dotnet-sonarscanner
        run: |
          dotnet tool install --global dotnet-sonarscanner --version 5.14.0

      - name: Start Sonar scanning
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          RUN_NUMBER: ${{ github.run_number }}
          RUN_ATTEMPT: ${{ github.run_attempt }}
          PULL_REQUEST_ID: ${{ steps.findPr.outputs.pr }}
          PULL_REQUEST_SOURCE_BRANCH: ${{ github.ref }}
          PULL_REQUEST_TARGET_BRANCH: refs/heads/master
        shell: bash
        run: sh ./startsonar.sh

      - name: Build the solution for quality metrics
        shell: bash
        run: dotnet build HomeBudgetAccountingApi.sln --no-incremental

      - name: Run tests for coverage collection
        shell: bash
        run: |
          dotnet-dotcover test HomeBudgetAccountingApi.sln \
            --dcReportType=HTML \
            --dcOutput="test-results/accounting-coverage.html" \
            --dcFilters="+:HomeBudget.*;-:type=*.IntegrationTests;-:type=*.Tests"

      - name: End SonarCloud scanning
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  # Job for Docker Build
  docker-build:
    needs: setup-and-install-tools
    name: Build Docker Image
    runs-on: ubuntu-latest
    env:
      BUILD_VERSION: ${{ needs.setup-and-install-tools.outputs.tag_version }}
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure full git history for Docker build context

      - name: Build Docker image
        shell: bash
        run: |
          docker build --target 'final' \
            -t "${{ secrets.DOCKERHUB_USERNAME }}/homebudget-accounting-api:${{ needs.setup-and-install-tools.outputs.tag_version }}" .

  # Job for Docker Push
  docker-push:
    needs: docker-build
    name: Push Docker Image to Docker Hub
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        shell: bash
        run: |
          docker push "${{ secrets.DOCKERHUB_USERNAME }}/homebudget-accounting-api:${{ needs.docker-build.outputs.BUILD_VERSION }}"
